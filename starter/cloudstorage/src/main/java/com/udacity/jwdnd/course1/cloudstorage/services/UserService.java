package com.udacity.jwdnd.course1.cloudstorage.services;

import com.udacity.jwdnd.course1.cloudstorage.Exceptions.DataNotAvailableException;
import com.udacity.jwdnd.course1.cloudstorage.Exceptions.SignUpException;
import com.udacity.jwdnd.course1.cloudstorage.Mapper.UserMapper;
import com.udacity.jwdnd.course1.cloudstorage.Model.SignupRequest;
import com.udacity.jwdnd.course1.cloudstorage.Model.Users;
import org.springframework.stereotype.Service;

import java.security.SecureRandom;
import java.util.Base64;

@Service
public class UserService {

    private UserMapper userMapper;
    private HashService hashService;

    public UserService(UserMapper userMapper, HashService hashService){
        this.userMapper = userMapper;
        this.hashService = hashService;
    }


    public int createUser(SignupRequest req) throws SignUpException{
        if(usernameExists(req.getUsername())){
            throw new SignUpException("User already exists");
        }

        SecureRandom random = new SecureRandom();
        byte key[] = new byte[16];

        // places the generated random bytes into user generated byte array which is in this case key
        random.nextBytes(key);

        String salt = Base64.getEncoder().encodeToString(key);
        String hashedPassword = hashService.getHashedValue(req.getPassword(), salt);

        Users user = new Users();
        user.setFirstname(req.getFirstname());
        user.setLastname(req.getLastname());
        user.setUsername(req.getUsername());
        user.setSalt(salt);
        user.setPassword(hashedPassword);

        int userId = userMapper.insertUser(user);
        return userId;
    }


    public boolean usernameExists (String username){

        Users users = userMapper.getUser(username);
        if(users!=null){
            return true;
        }else
            return false;
    }

    public Users getUserByUserName(String username) throws DataNotAvailableException{

        if(username == null || username.equals(""))
            throw new IllegalArgumentException("username cannot be blank");

        Users users = userMapper.getUser(username);
        if(users==null){
            throw new DataNotAvailableException("User not available");
        }
        return users;
    }
}
